import { rgba, pixelMap, run, distSq } from './util.js';

//const colours = [
//    0x7fb238, 0xf7e9a3, 0xc7c7c7,
//    0xff0000, 0xa0a0ff, 0xa7a7a7,
//    0x007c00, 0xffffff, 0xa4a8b8,
//    0x976d4d, 0x707070, 0x4040ff,
//    0x8f7748, 0xfffcf5, 0xd87f33,
//    0xb24cd8, 0x6699d8, 0xe5e533,
//    0x7fcc19, 0xf27fa5, 0x4c4c4c,
//    0x999999, 0x4c7f99, 0x7f3fb2,
//    0x334cb2, 0x664c33, 0x667f33,
//    0x993333, 0x191919, 0xfaee4d,
//    0x5cdbd5, 0x4a80ff, 0x00d93a,
//    0x815631, 0x700200, 0xd1b1a1,
//    0x9f5224, 0x95576c, 0x706c8a,
//    0xba8524, 0x677535, 0xa04d4e,
//    0x392923, 0x876b62, 0x575c5c,
//    0x7a4958, 0x4c3e5c, 0x4c3223,
//    0x4c522a, 0x8e3c2e, 0x251610,
//    0xbd3031, 0x943f61, 0x5c191d,
//    0x167e86, 0x3a8e8c, 0x562c3e,
//    0x14b485, 0x646464, 0xd8af93,
//    0x7fa796,
//];

const colours = [
    0x597d27, 0x6d9930, 0x7fb238, 0x435e1d,
    0xaea473, 0xd5c98c, 0xf7e9a3, 0x827b56,
    0x8c8c8c, 0xababab, 0xc7c7c7, 0x696969,
    0xb40000, 0xdc0000, 0xff0000, 0x870000,
    0x7070b4, 0x8a8adc, 0xa0a0ff, 0x545487,
    0x757575, 0x909090, 0xa7a7a7, 0x585858,
    0x005700, 0x006a00, 0x007c00, 0x004100,
    0xb4b4b4, 0xdcdcdc, 0xffffff, 0x878787,
    0x737681, 0x8d909e, 0xa4a8b8, 0x565861,
    0x6a4c36, 0x825e42, 0x976d4d, 0x4f3928,
    0x4f4f4f, 0x606060, 0x707070, 0x3b3b3b,
    0x2d2db4, 0x3737dc, 0x4040ff, 0x212187,
    0x645432, 0x7b663e, 0x8f7748, 0x4b3f26,
    0xb4b1ac, 0xdcd9d3, 0xfffcf5, 0x878581,
    0x985924, 0xba6d2c, 0xd87f33, 0x72431b,
    0x7d3598, 0x9941ba, 0xb24cd8, 0x5e2872,
    0x486c98, 0x5884ba, 0x6699d8, 0x365172,
    0xa1a124, 0xc5c52c, 0xe5e533, 0x79791b,
    0x599011, 0x6db015, 0x7fcc19, 0x436c0d,
    0xaa5974, 0xd06d8e, 0xf27fa5, 0x804357,
    0x353535, 0x414141, 0x4c4c4c, 0x282828,
    0x6c6c6c, 0x848484, 0x999999, 0x515151,
    0x35596c, 0x416d84, 0x4c7f99, 0x284351,
    0x592c7d, 0x6d3699, 0x7f3fb2, 0x43215e,
    0x24357d, 0x2c4199, 0x334cb2, 0x1b285e,
    0x483524, 0x58412c, 0x664c33, 0x36281b,
    0x485924, 0x586d2c, 0x667f33, 0x36431b,
    0x6c2424, 0x842c2c, 0x993333, 0x511b1b,
    0x111111, 0x151515, 0x191919, 0x0d0d0d,
    0xb0a836, 0xd7cd42, 0xfaee4d, 0x847e28,
    0x409a96, 0x4fbcb7, 0x5cdbd5, 0x307370,
    0x345ab4, 0x3f6edc, 0x4a80ff, 0x274387,
    0x009928, 0x00bb32, 0x00d93a, 0x00721e,
    0x5b3c22, 0x6f4a2a, 0x815631, 0x442d19,
    0x4f0100, 0x600100, 0x700200, 0x3b0100,
    0x937c71, 0xb4988a, 0xd1b1a1, 0x6e5d55,
    0x703919, 0x89461f, 0x9f5224, 0x542b13,
    0x693d4c, 0x804b5d, 0x95576c, 0x4e2e39,
    0x4f4c61, 0x605d77, 0x706c8a, 0x3b3949,
    0x835d19, 0xa0721f, 0xba8524, 0x624613,
    0x485225, 0x58642d, 0x677535, 0x363d1c,
    0x703637, 0x8a4243, 0xa04d4e, 0x542829,
    0x281c18, 0x31231e, 0x392923, 0x1e1512,
    0x5f4b45, 0x745c54, 0x876b62, 0x473833,
    0x3d4040, 0x4b4f4f, 0x575c5c, 0x2e3030,
    0x56333e, 0x693e4b, 0x7a4958, 0x40262e,
    0x352b40, 0x41354f, 0x4c3e5c, 0x282030,
    0x352318, 0x412b1e, 0x4c3223, 0x281a12,
    0x35391d, 0x414624, 0x4c522a, 0x282b16,
    0x642a20, 0x7a3327, 0x8e3c2e, 0x4b1f18,
    0x1a0f0b, 0x1f120d, 0x251610, 0x130b08,
    0x852122, 0xa3292a, 0xbd3031, 0x641919,
    0x682c44, 0x7f3653, 0x943f61, 0x4e2133,
    0x401114, 0x4f1519, 0x5c191d, 0x300d0f,
    0x0f585e, 0x126c73, 0x167e86, 0x0b4246,
    0x286462, 0x327a78, 0x3a8e8c, 0x1e4b4a,
    0x3c1f2b, 0x4a2535, 0x562c3e, 0x2d1720,
    0x0e7f5d, 0x119b72, 0x14b485, 0x0a5f46,
    0x464646, 0x565656, 0x646464, 0x343434,
    0x987b67, 0xba967e, 0xd8af93, 0x725c4d,
    0x597569, 0x6d9081, 0x7fa796, 0x43584f,
];

const processImage = async (inPath, outPath) => {
    await pixelMap(inPath, outPath, (x, y, c) => {
        const { r, g, b, a } = rgba(c);

        let minD = Infinity;
        let minC = Infinity;
        for (const c of colours) {
            let d = distSq({r,g,b}, rgba((c << 8) | 0xff));
            if (d < minD) {
                minD = d;
                minC = c;
            }
        }

        return BigInt(minC);
    });
}

run('Map-Colours', '\u00a77All Textures are Greyscale', processImage);
